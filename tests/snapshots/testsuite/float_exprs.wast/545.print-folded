(module
  (type (;0;) (func (param f32) (result f32)))
  (type (;1;) (func (param f64) (result f64)))
  (export "f32.no_fold_lt_if_to_abs" (func 0))
  (export "f32.no_fold_le_if_to_abs" (func 1))
  (export "f32.no_fold_gt_if_to_abs" (func 2))
  (export "f32.no_fold_ge_if_to_abs" (func 3))
  (export "f64.no_fold_lt_if_to_abs" (func 4))
  (export "f64.no_fold_le_if_to_abs" (func 5))
  (export "f64.no_fold_gt_if_to_abs" (func 6))
  (export "f64.no_fold_ge_if_to_abs" (func 7))
  (func (;0;) (type 0) (param $x f32) (result f32)
    (if (result f32) ;; label = @1
      (f32.lt
        (local.get $x)
        (f32.const 0x0p+0 (;=0;)))
      (then
        (f32.neg
          (local.get $x)))
      (else
        (local.get $x)))
  )
  (func (;1;) (type 0) (param $x f32) (result f32)
    (if (result f32) ;; label = @1
      (f32.le
        (local.get $x)
        (f32.const -0x0p+0 (;=-0;)))
      (then
        (f32.neg
          (local.get $x)))
      (else
        (local.get $x)))
  )
  (func (;2;) (type 0) (param $x f32) (result f32)
    (if (result f32) ;; label = @1
      (f32.gt
        (local.get $x)
        (f32.const -0x0p+0 (;=-0;)))
      (then
        (local.get $x))
      (else
        (f32.neg
          (local.get $x))))
  )
  (func (;3;) (type 0) (param $x f32) (result f32)
    (if (result f32) ;; label = @1
      (f32.ge
        (local.get $x)
        (f32.const 0x0p+0 (;=0;)))
      (then
        (local.get $x))
      (else
        (f32.neg
          (local.get $x))))
  )
  (func (;4;) (type 1) (param $x f64) (result f64)
    (if (result f64) ;; label = @1
      (f64.lt
        (local.get $x)
        (f64.const 0x0p+0 (;=0;)))
      (then
        (f64.neg
          (local.get $x)))
      (else
        (local.get $x)))
  )
  (func (;5;) (type 1) (param $x f64) (result f64)
    (if (result f64) ;; label = @1
      (f64.le
        (local.get $x)
        (f64.const -0x0p+0 (;=-0;)))
      (then
        (f64.neg
          (local.get $x)))
      (else
        (local.get $x)))
  )
  (func (;6;) (type 1) (param $x f64) (result f64)
    (if (result f64) ;; label = @1
      (f64.gt
        (local.get $x)
        (f64.const -0x0p+0 (;=-0;)))
      (then
        (local.get $x))
      (else
        (f64.neg
          (local.get $x))))
  )
  (func (;7;) (type 1) (param $x f64) (result f64)
    (if (result f64) ;; label = @1
      (f64.ge
        (local.get $x)
        (f64.const 0x0p+0 (;=0;)))
      (then
        (local.get $x))
      (else
        (f64.neg
          (local.get $x))))
  )
)
