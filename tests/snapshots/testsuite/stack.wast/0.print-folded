(module
  (type (;0;) (func (param i64) (result i64)))
  (type (;1;) (func (result i32)))
  (type (;2;) (func))
  (global $temp (;0;) (mut i32) (i32.const 0))
  (export "fac-expr" (func 0))
  (export "fac-stack" (func 1))
  (export "fac-stack-raw" (func 2))
  (export "fac-mixed" (func 3))
  (export "fac-mixed-raw" (func 4))
  (export "not-quite-a-tree" (func 7))
  (func (;0;) (type 0) (param $n i64) (result i64)
    (local $i i64) (local $res i64)
    (local.set $i
      (local.get $n))
    (local.set $res
      (i64.const 1))
    (block $done
      (loop $loop
        (if ;; label = @3
          (i64.eq
            (local.get $i)
            (i64.const 0))
          (then
            (br $done))
          (else
            (local.set $res
              (i64.mul
                (local.get $i)
                (local.get $res)))
            (local.set $i
              (i64.sub
                (local.get $i)
                (i64.const 1)))))
        (br $loop)))
    (local.get $res)
  )
  (func (;1;) (type 0) (param $n i64) (result i64)
    (local $i i64) (local $res i64)
    (local.set $i
      (local.get $n))
    (local.set $res
      (i64.const 1))
    (block $done
      (loop $loop
        (if ;; label = @3
          (i64.eq
            (local.get $i)
            (i64.const 0))
          (then
            (br $done))
          (else
            (local.set $res
              (i64.mul
                (local.get $i)
                (local.get $res)))
            (local.set $i
              (i64.sub
                (local.get $i)
                (i64.const 1)))))
        (br $loop)))
    (local.get $res)
  )
  (func (;2;) (type 0) (param $n i64) (result i64)
    (local $i i64) (local $res i64)
    (local.set $i
      (local.get $n))
    (local.set $res
      (i64.const 1))
    (block $done
      (loop $loop
        (if $body
          (i64.eq
            (local.get $i)
            (i64.const 0))
          (then
            (br $done))
          (else
            (local.set $res
              (i64.mul
                (local.get $i)
                (local.get $res)))
            (local.set $i
              (i64.sub
                (local.get $i)
                (i64.const 1)))))
        (br $loop)))
    (local.get $res)
  )
  (func (;3;) (type 0) (param $n i64) (result i64)
    (local $i i64) (local $res i64)
    (local.set $i
      (local.get $n))
    (local.set $res
      (i64.const 1))
    (block $done
      (loop $loop
        (if ;; label = @3
          (i64.eq
            (local.get $i)
            (i64.const 0))
          (then
            (br $done))
          (else
            (local.set $res
              (i64.mul
                (local.get $i)
                (local.get $res)))
            (local.set $i
              (i64.sub
                (local.get $i)
                (i64.const 1)))))
        (br $loop)))
    (local.get $res)
  )
  (func (;4;) (type 0) (param $n i64) (result i64)
    (local $i i64) (local $res i64)
    (local.set $i
      (local.get $n))
    (local.set $res
      (i64.const 1))
    (block $done
      (loop $loop
        (if ;; label = @3
          (i64.eq
            (local.get $i)
            (i64.const 0))
          (then
            (br $done))
          (else
            (local.set $res
              (i64.mul
                (local.get $i)
                (local.get $res)))
            (local.set $i
              (i64.sub
                (local.get $i)
                (i64.const 1)))))
        (br $loop)))
    (local.get $res)
  )
  (func $add_one_to_global (;5;) (type 1) (result i32)
    (local i32)
    (global.set $temp
      (i32.add
        (i32.const 1)
        (global.get $temp)))
    (global.get $temp)
  )
  (func $add_one_to_global_and_drop (;6;) (type 2)
    (drop
      (call $add_one_to_global))
  )
  (func (;7;) (type 1) (result i32)
    (i32.add
      (call $add_one_to_global)
      (call $add_one_to_global)
      (call $add_one_to_global_and_drop))
  )
)
