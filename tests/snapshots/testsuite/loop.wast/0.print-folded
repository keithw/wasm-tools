(module
  (type $check (;0;) (func (param i32 i32) (result i32)))
  (type $block-sig-1 (;1;) (func))
  (type $block-sig-2 (;2;) (func (result i32)))
  (type $block-sig-3 (;3;) (func (param i32)))
  (type $block-sig-4 (;4;) (func (param i32 f64 i32) (result i32 f64 i32)))
  (type (;5;) (func (result i32 i64 i32)))
  (type (;6;) (func (param i32) (result i32)))
  (type (;7;) (func (result i32 i32)))
  (type (;8;) (func (result f32 f32)))
  (type (;9;) (func (result i32 i32 i64)))
  (type (;10;) (func (param i32 i32 i64)))
  (type (;11;) (func (param i32 i32) (result i32 i32)))
  (type (;12;) (func (param i64) (result i64)))
  (type (;13;) (func (param f32 f32) (result f32)))
  (table (;0;) 1 1 funcref)
  (memory (;0;) 1)
  (global $a (;0;) (mut i32) (i32.const 0))
  (export "empty" (func 1))
  (export "singular" (func 2))
  (export "multi" (func 3))
  (export "nested" (func 4))
  (export "deep" (func 5))
  (export "as-select-first" (func 6))
  (export "as-select-mid" (func 7))
  (export "as-select-last" (func 8))
  (export "as-if-condition" (func 9))
  (export "as-if-then" (func 10))
  (export "as-if-else" (func 11))
  (export "as-br_if-first" (func 12))
  (export "as-br_if-last" (func 13))
  (export "as-br_table-first" (func 14))
  (export "as-br_table-last" (func 15))
  (export "as-call_indirect-first" (func 17))
  (export "as-call_indirect-mid" (func 18))
  (export "as-call_indirect-last" (func 19))
  (export "as-store-first" (func 20))
  (export "as-store-last" (func 21))
  (export "as-memory.grow-value" (func 22))
  (export "as-call-value" (func 24))
  (export "as-return-value" (func 25))
  (export "as-drop-operand" (func 26))
  (export "as-br-value" (func 27))
  (export "as-local.set-value" (func 28))
  (export "as-local.tee-value" (func 29))
  (export "as-global.set-value" (func 30))
  (export "as-load-operand" (func 31))
  (export "as-unary-operand" (func 32))
  (export "as-binary-operand" (func 33))
  (export "as-test-operand" (func 34))
  (export "as-compare-operand" (func 35))
  (export "as-binary-operands" (func 36))
  (export "as-compare-operands" (func 37))
  (export "as-mixed-operands" (func 38))
  (export "break-bare" (func 39))
  (export "break-value" (func 40))
  (export "break-multi-value" (func 41))
  (export "break-repeated" (func 42))
  (export "break-inner" (func 43))
  (export "cont-inner" (func 44))
  (export "param" (func 45))
  (export "params" (func 46))
  (export "params-id" (func 47))
  (export "param-break" (func 48))
  (export "params-break" (func 49))
  (export "params-id-break" (func 50))
  (export "effects" (func $fx))
  (export "while" (func 52))
  (export "for" (func 53))
  (export "nesting" (func 54))
  (export "type-use" (func 55))
  (elem (;0;) (table 0) (i32.const 0) func $func)
  (func $dummy (;0;) (type $block-sig-1))
  (func (;1;) (type $block-sig-1)
    (loop ;; label = @1
    )
    (loop $l)
  )
  (func (;2;) (type $block-sig-2) (result i32)
    (loop ;; label = @1
      (nop))
    (loop (result i32) ;; label = @1
      (i32.const 7))
  )
  (func (;3;) (type $block-sig-2) (result i32)
    (loop ;; label = @1
      (call $dummy)
      (call $dummy)
      (call $dummy)
      (call $dummy))
    (drop
      (loop (result i32) ;; label = @1
        (call $dummy)
        (call $dummy)
        (i32.const 8)
        (call $dummy)))
    (loop (type 5) (result i32 i64 i32) ;; label = @1
      (call $dummy)
      (call $dummy)
      (call $dummy)
      (i32.const 8)
      (call $dummy)
      (call $dummy)
      (call $dummy)
      (call $dummy)
      (i64.const 7)
      (call $dummy)
      (call $dummy)
      (call $dummy)
      (call $dummy)
      (i32.const 9)
      (call $dummy))
    (drop)
    (drop)
  )
  (func (;4;) (type $block-sig-2) (result i32)
    (loop (result i32) ;; label = @1
      (loop ;; label = @2
        (call $dummy)
        (block ;; label = @3
        )
        (nop))
      (loop (result i32) ;; label = @2
        (call $dummy)
        (i32.const 9)))
  )
  (func (;5;) (type $block-sig-2) (result i32)
    (loop (result i32) ;; label = @1
      (block (result i32) ;; label = @2
        (loop (result i32) ;; label = @3
          (block (result i32) ;; label = @4
            (loop (result i32) ;; label = @5
              (block (result i32) ;; label = @6
                (loop (result i32) ;; label = @7
                  (block (result i32) ;; label = @8
                    (loop (result i32) ;; label = @9
                      (block (result i32) ;; label = @10
                        (loop (result i32) ;; label = @11
                          (block (result i32) ;; label = @12
                            (loop (result i32) ;; label = @13
                              (block (result i32) ;; label = @14
                                (loop (result i32) ;; label = @15
                                  (block (result i32) ;; label = @16
                                    (loop (result i32) ;; label = @17
                                      (block (result i32) ;; label = @18
                                        (loop (result i32) ;; label = @19
                                          (block (result i32) ;; label = @20
                                            (loop (result i32) ;; label = @21
                                              (block (result i32) ;; label = @22
                                                (loop (result i32) ;; label = @23
                                                  (block (result i32) ;; label = @24
                                                    (loop (result i32) ;; label = @25
                                                      (block (result i32) ;; label = @26
                                                        (loop (result i32) ;; label = @27
                                                          (block (result i32) ;; label = @28
                                                            (loop (result i32) ;; label = @29
                                                              (block (result i32) ;; label = @30
                                                                (loop (result i32) ;; label = @31
                                                                  (block (result i32) ;; label = @32
                                                                    (loop (result i32) ;; label = @33
                                                                      (block (result i32) ;; label = @34
                                                                        (loop (result i32) ;; label = @35
                                                                          (block (result i32) ;; label = @36
                                                                            (loop (result i32) ;; label = @37
                                                                              (block (result i32) ;; label = @38
                                                                                (loop (result i32) ;; label = @39
                                                                                  (block (result i32) ;; label = @40
                                                                                    (call $dummy)
                                                                                    (i32.const 150)))))))))))))))))))))))))))))))))))))))))
  )
  (func (;6;) (type $block-sig-2) (result i32)
    (select
      (loop (result i32) ;; label = @1
        (i32.const 1))
      (i32.const 2)
      (i32.const 3))
  )
  (func (;7;) (type $block-sig-2) (result i32)
    (select
      (i32.const 2)
      (loop (result i32) ;; label = @1
        (i32.const 1))
      (i32.const 3))
  )
  (func (;8;) (type $block-sig-2) (result i32)
    (select
      (i32.const 2)
      (i32.const 3)
      (loop (result i32) ;; label = @1
        (i32.const 1)))
  )
  (func (;9;) (type $block-sig-1)
    (if ;; label = @1
      (loop (result i32) ;; label = @1
        (i32.const 1))
      (then
        (call $dummy)))
  )
  (func (;10;) (type $block-sig-2) (result i32)
    (if (result i32) ;; label = @1
      (i32.const 1)
      (then
        (loop (result i32) ;; label = @2
          (i32.const 1)))
      (else
        (i32.const 2)))
  )
  (func (;11;) (type $block-sig-2) (result i32)
    (if (result i32) ;; label = @1
      (i32.const 1)
      (then
        (i32.const 2))
      (else
        (loop (result i32) ;; label = @2
          (i32.const 1))))
  )
  (func (;12;) (type $block-sig-2) (result i32)
    (block (result i32) ;; label = @1
      (br_if 0 (;@1;)
        (loop (result i32) ;; label = @2
          (i32.const 1))
        (i32.const 2)))
  )
  (func (;13;) (type $block-sig-2) (result i32)
    (block (result i32) ;; label = @1
      (br_if 0 (;@1;)
        (i32.const 2)
        (loop (result i32) ;; label = @2
          (i32.const 1))))
  )
  (func (;14;) (type $block-sig-2) (result i32)
    (block (result i32) ;; label = @1
      (br_table 0 (;@1;) 0 (;@1;)
        (loop (result i32) ;; label = @2
          (i32.const 1))
        (i32.const 2)))
  )
  (func (;15;) (type $block-sig-2) (result i32)
    (block (result i32) ;; label = @1
      (br_table 0 (;@1;) 0 (;@1;)
        (i32.const 2)
        (loop (result i32) ;; label = @2
          (i32.const 1))))
  )
  (func $func (;16;) (type $check) (param i32 i32) (result i32)
    (local.get 0)
  )
  (func (;17;) (type $block-sig-2) (result i32)
    (block (result i32) ;; label = @1
      (call_indirect (type $check)
        (loop (result i32) ;; label = @2
          (i32.const 1))
        (i32.const 2)
        (i32.const 0)))
  )
  (func (;18;) (type $block-sig-2) (result i32)
    (block (result i32) ;; label = @1
      (call_indirect (type $check)
        (i32.const 2)
        (loop (result i32) ;; label = @2
          (i32.const 1))
        (i32.const 0)))
  )
  (func (;19;) (type $block-sig-2) (result i32)
    (block (result i32) ;; label = @1
      (call_indirect (type $check)
        (i32.const 1)
        (i32.const 2)
        (loop (result i32) ;; label = @2
          (i32.const 0))))
  )
  (func (;20;) (type $block-sig-1)
    (i32.store
      (loop (result i32) ;; label = @1
        (i32.const 1))
      (i32.const 1))
  )
  (func (;21;) (type $block-sig-1)
    (i32.store
      (i32.const 10)
      (loop (result i32) ;; label = @1
        (i32.const 1)))
  )
  (func (;22;) (type $block-sig-2) (result i32)
    (memory.grow
      (loop (result i32) ;; label = @1
        (i32.const 1)))
  )
  (func $f (;23;) (type 6) (param i32) (result i32)
    (local.get 0)
  )
  (func (;24;) (type $block-sig-2) (result i32)
    (call $f
      (loop (result i32) ;; label = @1
        (i32.const 1)))
  )
  (func (;25;) (type $block-sig-2) (result i32)
    (return
      (loop (result i32) ;; label = @1
        (i32.const 1)))
  )
  (func (;26;) (type $block-sig-1)
    (drop
      (loop (result i32) ;; label = @1
        (i32.const 1)))
  )
  (func (;27;) (type $block-sig-2) (result i32)
    (block (result i32) ;; label = @1
      (br 0 (;@1;)
        (loop (result i32) ;; label = @2
          (i32.const 1))))
  )
  (func (;28;) (type $block-sig-2) (result i32)
    (local i32)
    (local.set 0
      (loop (result i32) ;; label = @1
        (i32.const 1)))
    (local.get 0)
  )
  (func (;29;) (type $block-sig-2) (result i32)
    (local i32)
    (local.tee 0
      (loop (result i32) ;; label = @1
        (i32.const 1)))
  )
  (func (;30;) (type $block-sig-2) (result i32)
    (global.set $a
      (loop (result i32) ;; label = @1
        (i32.const 1)))
    (global.get $a)
  )
  (func (;31;) (type $block-sig-2) (result i32)
    (i32.load
      (loop (result i32) ;; label = @1
        (i32.const 1)))
  )
  (func (;32;) (type $block-sig-2) (result i32)
    (i32.ctz
      (loop (result i32) ;; label = @1
        (call $dummy)
        (i32.const 13)))
  )
  (func (;33;) (type $block-sig-2) (result i32)
    (i32.mul
      (loop (result i32) ;; label = @1
        (call $dummy)
        (i32.const 3))
      (loop (result i32) ;; label = @1
        (call $dummy)
        (i32.const 4)))
  )
  (func (;34;) (type $block-sig-2) (result i32)
    (i32.eqz
      (loop (result i32) ;; label = @1
        (call $dummy)
        (i32.const 13)))
  )
  (func (;35;) (type $block-sig-2) (result i32)
    (f32.gt
      (loop (result f32) ;; label = @1
        (call $dummy)
        (f32.const 0x1.8p+1 (;=3;)))
      (loop (result f32) ;; label = @1
        (call $dummy)
        (f32.const 0x1.8p+1 (;=3;))))
  )
  (func (;36;) (type $block-sig-2) (result i32)
    (i32.mul
      (loop (type 7) (result i32 i32) ;; label = @1
        (call $dummy)
        (i32.const 3)
        (call $dummy)
        (i32.const 4)))
  )
  (func (;37;) (type $block-sig-2) (result i32)
    (f32.gt
      (loop (type 8) (result f32 f32) ;; label = @1
        (call $dummy)
        (f32.const 0x1.8p+1 (;=3;))
        (call $dummy)
        (f32.const 0x1.8p+1 (;=3;))))
  )
  (func (;38;) (type $block-sig-2) (result i32)
    (loop (type 7) (result i32 i32) ;; label = @1
      (call $dummy)
      (i32.const 3)
      (call $dummy)
      (i32.const 4))
    (i32.const 5)
    (i32.add)
    (i32.mul)
  )
  (func (;39;) (type $block-sig-2) (result i32)
    (block ;; label = @1
      (loop ;; label = @2
        (br 1 (;@1;))
        (br 0 (;@2;))
        (unreachable)))
    (block ;; label = @1
      (loop ;; label = @2
        (br_if 1 (;@1;)
          (i32.const 1))
        (unreachable)))
    (block ;; label = @1
      (loop ;; label = @2
        (br_table 1 (;@1;)
          (i32.const 0))
        (unreachable)))
    (block ;; label = @1
      (loop ;; label = @2
        (br_table 1 (;@1;) 1 (;@1;) 1 (;@1;)
          (i32.const 1))
        (unreachable)))
    (i32.const 19)
  )
  (func (;40;) (type $block-sig-2) (result i32)
    (block (result i32) ;; label = @1
      (i32.const 0)
      (loop (type $block-sig-3) (param i32) ;; label = @2
        (block ;; label = @3
          (br 2 (;@1;)
            (i32.const 18)))
        (br 0 (;@2;)
          (i32.const 20)))
      (i32.const 19))
  )
  (func (;41;) (type 9) (result i32 i32 i64)
    (block (type 9) (result i32 i32 i64) ;; label = @1
      (i32.const 0)
      (i32.const 0)
      (i64.const 0)
      (loop (type 10) (param i32 i32 i64) ;; label = @2
        (block ;; label = @3
          (br 2 (;@1;)
            (i32.const 18)
            (i32.const -18)
            (i64.const 18)))
        (br 0 (;@2;)
          (i32.const 20)
          (i32.const -20)
          (i64.const 20)))
      (i32.const 19)
      (i32.const -19)
      (i64.const 19))
  )
  (func (;42;) (type $block-sig-2) (result i32)
    (block (result i32) ;; label = @1
      (loop (result i32) ;; label = @2
        (br 1 (;@1;)
          (i32.const 18))
        (br 1 (;@1;)
          (i32.const 19))
        (drop
          (br_if 1 (;@1;)
            (i32.const 20)
            (i32.const 0)))
        (drop
          (br_if 1 (;@1;)
            (i32.const 20)
            (i32.const 1)))
        (br 1 (;@1;)
          (i32.const 21))
        (br_table 1 (;@1;)
          (i32.const 22)
          (i32.const 0))
        (br_table 1 (;@1;) 1 (;@1;) 1 (;@1;)
          (i32.const 23)
          (i32.const 1))
        (i32.const 21)))
  )
  (func (;43;) (type $block-sig-2) (result i32)
    (local i32)
    (local.set 0
      (i32.const 0))
    (local.set 0
      (i32.add
        (local.get 0)
        (block (result i32) ;; label = @1
          (loop (result i32) ;; label = @2
            (block (result i32) ;; label = @3
              (br 2 (;@1;)
                (i32.const 1)))))))
    (local.set 0
      (i32.add
        (local.get 0)
        (block (result i32) ;; label = @1
          (loop (result i32) ;; label = @2
            (loop (result i32) ;; label = @3
              (br 2 (;@1;)
                (i32.const 2)))))))
    (local.set 0
      (i32.add
        (local.get 0)
        (block (result i32) ;; label = @1
          (loop (result i32) ;; label = @2
            (block (result i32) ;; label = @3
              (loop (result i32) ;; label = @4
                (br 1 (;@3;)
                  (i32.const 4))))))))
    (local.set 0
      (i32.add
        (local.get 0)
        (block (result i32) ;; label = @1
          (loop (result i32) ;; label = @2
            (br 1 (;@1;)
              (i32.const 8))
            (i32.ctz)))))
    (local.set 0
      (i32.add
        (local.get 0)
        (block (result i32) ;; label = @1
          (loop (result i32) ;; label = @2
            (i32.ctz
              (loop (result i32) ;; label = @3
                (br 2 (;@1;)
                  (i32.const 16))))))))
    (local.get 0)
  )
  (func (;44;) (type $block-sig-2) (result i32)
    (local i32)
    (local.set 0
      (i32.const 0))
    (local.set 0
      (i32.add
        (local.get 0)
        (loop (result i32) ;; label = @1
          (loop (result i32) ;; label = @2
            (br 1 (;@1;))))))
    (local.set 0
      (i32.add
        (local.get 0)
        (loop (result i32) ;; label = @1
          (br 0 (;@1;))
          (i32.ctz))))
    (local.set 0
      (i32.add
        (local.get 0)
        (loop (result i32) ;; label = @1
          (i32.ctz
            (loop (result i32) ;; label = @2
              (br 1 (;@1;)))))))
    (local.get 0)
  )
  (func (;45;) (type $block-sig-2) (result i32)
    (i32.const 1)
    (loop (type 6) (param i32) (result i32) ;; label = @1
      (i32.const 2)
      (i32.add))
  )
  (func (;46;) (type $block-sig-2) (result i32)
    (i32.const 1)
    (i32.const 2)
    (loop (type $check) (param i32 i32) (result i32) ;; label = @1
      (i32.add))
  )
  (func (;47;) (type $block-sig-2) (result i32)
    (i32.const 1)
    (i32.const 2)
    (i32.add
      (loop (type 11) (param i32 i32) (result i32 i32) ;; label = @1
      ))
  )
  (func (;48;) (type $block-sig-2) (result i32)
    (local $x i32)
    (i32.const 1)
    (loop (type 6) (param i32) (result i32) ;; label = @1
      (i32.const 4)
      (br_if 0 (;@1;)
        (local.tee $x
          (i32.add))
        (i32.lt_u
          (local.get $x)
          (i32.const 10))))
  )
  (func (;49;) (type $block-sig-2) (result i32)
    (local $x i32)
    (i32.const 1)
    (i32.const 2)
    (loop (type $check) (param i32 i32) (result i32) ;; label = @1
      (br_if 0 (;@1;)
        (local.tee $x
          (i32.add))
        (i32.const 3)
        (i32.lt_u
          (local.get $x)
          (i32.const 10)))
      (drop))
  )
  (func (;50;) (type $block-sig-2) (result i32)
    (local $x i32)
    (local.set $x
      (i32.const 0))
    (i32.const 1)
    (i32.const 2)
    (i32.add
      (loop (type 11) (param i32 i32) (result i32 i32) ;; label = @1
        (local.set $x
          (i32.add
            (local.get $x)
            (i32.const 1)))
        (i32.lt_u
          (local.get $x)
          (i32.const 10))
        (br_if 0 (;@1;))))
  )
  (func $fx (;51;) (type $block-sig-2) (result i32)
    (local i32)
    (block ;; label = @1
      (loop ;; label = @2
        (local.set 0
          (i32.const 1))
        (local.set 0
          (i32.mul
            (local.get 0)
            (i32.const 3)))
        (local.set 0
          (i32.sub
            (local.get 0)
            (i32.const 5)))
        (local.set 0
          (i32.mul
            (local.get 0)
            (i32.const 7)))
        (br 1 (;@1;))
        (local.set 0
          (i32.mul
            (local.get 0)
            (i32.const 100)))))
    (i32.eq
      (local.get 0)
      (i32.const -14))
  )
  (func (;52;) (type 12) (param i64) (result i64)
    (local i64)
    (local.set 1
      (i64.const 1))
    (block ;; label = @1
      (loop ;; label = @2
        (br_if 1 (;@1;)
          (i64.eqz
            (local.get 0)))
        (local.set 1
          (i64.mul
            (local.get 0)
            (local.get 1)))
        (local.set 0
          (i64.sub
            (local.get 0)
            (i64.const 1)))
        (br 0 (;@2;))))
    (local.get 1)
  )
  (func (;53;) (type 12) (param i64) (result i64)
    (local i64 i64)
    (local.set 1
      (i64.const 1))
    (local.set 2
      (i64.const 2))
    (block ;; label = @1
      (loop ;; label = @2
        (br_if 1 (;@1;)
          (i64.gt_u
            (local.get 2)
            (local.get 0)))
        (local.set 1
          (i64.mul
            (local.get 1)
            (local.get 2)))
        (local.set 2
          (i64.add
            (local.get 2)
            (i64.const 1)))
        (br 0 (;@2;))))
    (local.get 1)
  )
  (func (;54;) (type 13) (param f32 f32) (result f32)
    (local f32 f32)
    (block ;; label = @1
      (loop ;; label = @2
        (br_if 1 (;@1;)
          (f32.eq
            (local.get 0)
            (f32.const 0x0p+0 (;=0;))))
        (local.set 2
          (local.get 1))
        (block ;; label = @3
          (loop ;; label = @4
            (br_if 1 (;@3;)
              (f32.eq
                (local.get 2)
                (f32.const 0x0p+0 (;=0;))))
            (br_if 3 (;@1;)
              (f32.lt
                (local.get 2)
                (f32.const 0x0p+0 (;=0;))))
            (local.set 3
              (f32.add
                (local.get 3)
                (local.get 2)))
            (local.set 2
              (f32.sub
                (local.get 2)
                (f32.const 0x1p+1 (;=2;))))
            (br 0 (;@4;))))
        (local.set 3
          (f32.div
            (local.get 3)
            (local.get 0)))
        (local.set 0
          (f32.sub
            (local.get 0)
            (f32.const 0x1p+0 (;=1;))))
        (br 0 (;@2;))))
    (local.get 3)
  )
  (func (;55;) (type $block-sig-1)
    (loop (type $block-sig-1) ;; label = @1
    )
    (loop (type $block-sig-2) (result i32) ;; label = @1
      (i32.const 0))
    (loop (type $block-sig-3) (param i32) ;; label = @1
      (drop))
    (i32.const 0)
    (f64.const 0x0p+0 (;=0;))
    (i32.const 0)
    (loop (type $block-sig-4) (param i32 f64 i32) (result i32 f64 i32) ;; label = @1
    )
    (drop)
    (drop)
    (drop)
    (loop (type $block-sig-2) (result i32) ;; label = @1
      (i32.const 0))
    (loop (type $block-sig-3) (param i32) ;; label = @1
      (drop))
    (i32.const 0)
    (f64.const 0x0p+0 (;=0;))
    (i32.const 0)
    (loop (type $block-sig-4) (param i32 f64 i32) (result i32 f64 i32) ;; label = @1
    )
    (drop)
    (drop)
    (drop)
  )
)
