(module
  (type (;0;) (func (param i64) (result i64)))
  (type (;1;) (func (param i64) (result i64 i64)))
  (type (;2;) (func (param i64 i64) (result i64 i64 i64)))
  (type (;3;) (func (param i64 i64) (result i64)))
  (export "fac-rec" (func 0))
  (export "fac-rec-named" (func $fac-rec-named))
  (export "fac-iter" (func 2))
  (export "fac-iter-named" (func 3))
  (export "fac-opt" (func 4))
  (export "fac-ssa" (func 7))
  (func (;0;) (type 0) (param i64) (result i64)
    (if (result i64) ;; label = @1
      (i64.eq
        (local.get 0)
        (i64.const 0))
      (then
        (i64.const 1))
      (else
        (i64.mul
          (local.get 0)
          (call 0
            (i64.sub
              (local.get 0)
              (i64.const 1))))))
  )
  (func $fac-rec-named (;1;) (type 0) (param $n i64) (result i64)
    (if (result i64) ;; label = @1
      (i64.eq
        (local.get $n)
        (i64.const 0))
      (then
        (i64.const 1))
      (else
        (i64.mul
          (local.get $n)
          (call $fac-rec-named
            (i64.sub
              (local.get $n)
              (i64.const 1))))))
  )
  (func (;2;) (type 0) (param i64) (result i64)
    (local i64 i64)
    (local.set 1
      (local.get 0))
    (local.set 2
      (i64.const 1))
    (block ;; label = @1
      (loop ;; label = @2
        (if ;; label = @3
          (i64.eq
            (local.get 1)
            (i64.const 0))
          (then
            (br 2 (;@1;)))
          (else
            (local.set 2
              (i64.mul
                (local.get 1)
                (local.get 2)))
            (local.set 1
              (i64.sub
                (local.get 1)
                (i64.const 1)))))
        (br 0 (;@2;))))
    (local.get 2)
  )
  (func (;3;) (type 0) (param $n i64) (result i64)
    (local $i i64) (local $res i64)
    (local.set $i
      (local.get $n))
    (local.set $res
      (i64.const 1))
    (block $done
      (loop $loop
        (if ;; label = @3
          (i64.eq
            (local.get $i)
            (i64.const 0))
          (then
            (br $done))
          (else
            (local.set $res
              (i64.mul
                (local.get $i)
                (local.get $res)))
            (local.set $i
              (i64.sub
                (local.get $i)
                (i64.const 1)))))
        (br $loop)))
    (local.get $res)
  )
  (func (;4;) (type 0) (param i64) (result i64)
    (local i64)
    (local.set 1
      (i64.const 1))
    (block ;; label = @1
      (br_if 0 (;@1;)
        (i64.lt_s
          (local.get 0)
          (i64.const 2)))
      (loop ;; label = @2
        (local.set 1
          (i64.mul
            (local.get 1)
            (local.get 0)))
        (local.set 0
          (i64.add
            (local.get 0)
            (i64.const -1)))
        (br_if 0 (;@2;)
          (i64.gt_s
            (local.get 0)
            (i64.const 1)))))
    (local.get 1)
  )
  (func $pick0 (;5;) (type 1) (param i64) (result i64 i64)
    (local.get 0)
    (local.get 0)
  )
  (func $pick1 (;6;) (type 2) (param i64 i64) (result i64 i64 i64)
    (local.get 0)
    (local.get 1)
    (local.get 0)
  )
  (func (;7;) (type 0) (param i64) (result i64)
    (i64.const 1)
    (local.get 0)
    (loop $l (type 3) (param i64 i64) (result i64)
      (call $pick1)
      (call $pick1)
      (i64.mul)
      (call $pick1)
      (i64.const 1)
      (i64.sub)
      (call $pick0)
      (i64.const 0)
      (i64.gt_u)
      (br_if $l)
      (drop)
      (return))
  )
)
