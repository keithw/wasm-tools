(module
  (type $proc (;0;) (func))
  (type $out-i32 (;1;) (func (result i32)))
  (type $out-i64 (;2;) (func (result i64)))
  (type $out-f32 (;3;) (func (result f32)))
  (type $out-f64 (;4;) (func (result f64)))
  (type $out-f64-i32 (;5;) (func (result f64 i32)))
  (type $over-i32 (;6;) (func (param i32) (result i32)))
  (type $over-i64 (;7;) (func (param i64) (result i64)))
  (type $over-f32 (;8;) (func (param f32) (result f32)))
  (type $over-f64 (;9;) (func (param f64) (result f64)))
  (type $over-i32-f64 (;10;) (func (param i32 f64) (result i32 f64)))
  (type $swap-i32-i64 (;11;) (func (param i32 i64) (result i64 i32)))
  (type $f32-i32 (;12;) (func (param f32 i32) (result i32)))
  (type $i32-i64 (;13;) (func (param i32 i64) (result i64)))
  (type $f64-f32 (;14;) (func (param f64 f32) (result f32)))
  (type $i64-f64 (;15;) (func (param i64 f64) (result f64)))
  (type $over-i32-duplicate (;16;) (func (param i32) (result i32)))
  (type $over-i64-duplicate (;17;) (func (param i64) (result i64)))
  (type $over-f32-duplicate (;18;) (func (param f32) (result f32)))
  (type $over-f64-duplicate (;19;) (func (param f64) (result f64)))
  (type (;20;) (func (param i64)))
  (type (;21;) (func (param i64 f64 i32 i64)))
  (type (;22;) (func (param i64) (result i32)))
  (type (;23;) (func (param i64 f64 i32 i64) (result i32)))
  (type (;24;) (func (result i32 f64)))
  (type (;25;) (func (result i64 i32)))
  (type (;26;) (func (param i32) (result i64)))
  (type (;27;) (func (param i32) (result f32)))
  (type (;28;) (func (param i32) (result f64)))
  (table (;0;) 32 32 funcref)
  (memory (;0;) 1)
  (global $a (;0;) (mut f64) (f64.const 0x1.4p+3 (;=10;)))
  (export "type-i32" (func 20))
  (export "type-i64" (func 21))
  (export "type-f32" (func 22))
  (export "type-f64" (func 23))
  (export "type-f64-i32" (func 24))
  (export "type-index" (func 25))
  (export "type-first-i32" (func 26))
  (export "type-first-i64" (func 27))
  (export "type-first-f32" (func 28))
  (export "type-first-f64" (func 29))
  (export "type-second-i32" (func 30))
  (export "type-second-i64" (func 31))
  (export "type-second-f32" (func 32))
  (export "type-second-f64" (func 33))
  (export "type-all-f64-i32" (func 34))
  (export "type-all-i32-f64" (func 35))
  (export "type-all-i32-i64" (func 36))
  (export "dispatch" (func 37))
  (export "dispatch-structural-i64" (func 38))
  (export "dispatch-structural-i32" (func 39))
  (export "dispatch-structural-f32" (func 40))
  (export "dispatch-structural-f64" (func 41))
  (export "fac-i64" (func $fac-i64))
  (export "fib-i64" (func $fib-i64))
  (export "fac-i32" (func $fac-i32))
  (export "fac-f32" (func $fac-f32))
  (export "fac-f64" (func $fac-f64))
  (export "fib-i32" (func $fib-i32))
  (export "fib-f32" (func $fib-f32))
  (export "fib-f64" (func $fib-f64))
  (export "even" (func $even))
  (export "odd" (func $odd))
  (export "runaway" (func $runaway))
  (export "mutual-runaway" (func $mutual-runaway1))
  (export "as-select-first" (func 55))
  (export "as-select-mid" (func 56))
  (export "as-select-last" (func 57))
  (export "as-if-condition" (func 58))
  (export "as-br_if-first" (func 59))
  (export "as-br_if-last" (func 60))
  (export "as-br_table-first" (func 61))
  (export "as-br_table-last" (func 62))
  (export "as-store-first" (func 63))
  (export "as-store-last" (func 64))
  (export "as-memory.grow-value" (func 65))
  (export "as-return-value" (func 66))
  (export "as-drop-operand" (func 67))
  (export "as-br-value" (func 68))
  (export "as-local.set-value" (func 69))
  (export "as-local.tee-value" (func 70))
  (export "as-global.set-value" (func 71))
  (export "as-load-operand" (func 72))
  (export "as-unary-operand" (func 73))
  (export "as-binary-left" (func 74))
  (export "as-binary-right" (func 75))
  (export "as-test-operand" (func 76))
  (export "as-compare-left" (func 77))
  (export "as-compare-right" (func 78))
  (export "as-convert-operand" (func 79))
  (elem (;0;) (table 0) (i32.const 0) func $const-i32 $const-i64 $const-f32 $const-f64 $id-i32 $id-i64 $id-f32 $id-f64 $f32-i32 $i32-i64 $f64-f32 $i64-f64 $fac-i64 $fib-i64 $even $odd $runaway $mutual-runaway1 $mutual-runaway2 $over-i32-duplicate $over-i64-duplicate $over-f32-duplicate $over-f64-duplicate $fac-i32 $fac-f32 $fac-f64 $fib-i32 $fib-f32 $fib-f64 $const-f64-i32 $id-i32-f64 $swap-i32-i64)
  (func $const-i32 (;0;) (type $out-i32) (result i32)
    (i32.const 306)
  )
  (func $const-i64 (;1;) (type $out-i64) (result i64)
    (i64.const 356)
  )
  (func $const-f32 (;2;) (type $out-f32) (result f32)
    (f32.const 0x1.e64p+11 (;=3890;))
  )
  (func $const-f64 (;3;) (type $out-f64) (result f64)
    (f64.const 0x1.ec8p+11 (;=3940;))
  )
  (func $const-f64-i32 (;4;) (type $out-f64-i32) (result f64 i32)
    (f64.const 0x1.ec8p+11 (;=3940;))
    (i32.const 32)
  )
  (func $id-i32 (;5;) (type $over-i32) (param i32) (result i32)
    (local.get 0)
  )
  (func $id-i64 (;6;) (type $over-i64) (param i64) (result i64)
    (local.get 0)
  )
  (func $id-f32 (;7;) (type $over-f32) (param f32) (result f32)
    (local.get 0)
  )
  (func $id-f64 (;8;) (type $over-f64) (param f64) (result f64)
    (local.get 0)
  )
  (func $id-i32-f64 (;9;) (type $over-i32-f64) (param i32 f64) (result i32 f64)
    (local.get 0)
    (local.get 1)
  )
  (func $swap-i32-i64 (;10;) (type $swap-i32-i64) (param i32 i64) (result i64 i32)
    (local.get 1)
    (local.get 0)
  )
  (func $i32-i64 (;11;) (type $i32-i64) (param i32 i64) (result i64)
    (local.get 1)
  )
  (func $i64-f64 (;12;) (type $i64-f64) (param i64 f64) (result f64)
    (local.get 1)
  )
  (func $f32-i32 (;13;) (type $f32-i32) (param f32 i32) (result i32)
    (local.get 1)
  )
  (func $f64-f32 (;14;) (type $f64-f32) (param f64 f32) (result f32)
    (local.get 1)
  )
  (func $over-i32-duplicate (;15;) (type $over-i32-duplicate) (param i32) (result i32)
    (local.get 0)
  )
  (func $over-i64-duplicate (;16;) (type $over-i64-duplicate) (param i64) (result i64)
    (local.get 0)
  )
  (func $over-f32-duplicate (;17;) (type $over-f32-duplicate) (param f32) (result f32)
    (local.get 0)
  )
  (func $over-f64-duplicate (;18;) (type $over-f64-duplicate) (param f64) (result f64)
    (local.get 0)
  )
  (func (;19;) (type $proc)
    (call_indirect (type $proc)
      (i32.const 0))
    (call_indirect (type 20)
      (i64.const 0)
      (i32.const 0))
    (call_indirect (type 21)
      (i64.const 0)
      (f64.const 0x0p+0 (;=0;))
      (i32.const 0)
      (i64.const 0)
      (i32.const 0))
    (call_indirect (type $proc)
      (i32.const 0))
    (drop
      (i32.eqz
        (call_indirect (type $out-i32)
          (i32.const 0))))
    (drop
      (i32.eqz
        (call_indirect (type $out-i32)
          (i32.const 0))))
    (drop
      (i32.eqz
        (call_indirect (type 22)
          (i64.const 0)
          (i32.const 0))))
    (drop
      (i32.eqz
        (call_indirect (type 23)
          (i64.const 0)
          (f64.const 0x0p+0 (;=0;))
          (i32.const 0)
          (i64.const 0)
          (i32.const 0))))
    (drop
      (i64.eqz
        (call_indirect (type $over-i64)
          (i64.const 0)
          (i32.const 0))))
  )
  (func (;20;) (type $out-i32) (result i32)
    (call_indirect (type $out-i32)
      (i32.const 0))
  )
  (func (;21;) (type $out-i64) (result i64)
    (call_indirect (type $out-i64)
      (i32.const 1))
  )
  (func (;22;) (type $out-f32) (result f32)
    (call_indirect (type $out-f32)
      (i32.const 2))
  )
  (func (;23;) (type $out-f64) (result f64)
    (call_indirect (type $out-f64)
      (i32.const 3))
  )
  (func (;24;) (type $out-f64-i32) (result f64 i32)
    (call_indirect (type $out-f64-i32)
      (i32.const 29))
  )
  (func (;25;) (type $out-i64) (result i64)
    (call_indirect (type $over-i64)
      (i64.const 100)
      (i32.const 5))
  )
  (func (;26;) (type $out-i32) (result i32)
    (call_indirect (type $over-i32)
      (i32.const 32)
      (i32.const 4))
  )
  (func (;27;) (type $out-i64) (result i64)
    (call_indirect (type $over-i64)
      (i64.const 64)
      (i32.const 5))
  )
  (func (;28;) (type $out-f32) (result f32)
    (call_indirect (type $over-f32)
      (f32.const 0x1.51eb86p+0 (;=1.32;))
      (i32.const 6))
  )
  (func (;29;) (type $out-f64) (result f64)
    (call_indirect (type $over-f64)
      (f64.const 0x1.a3d70a3d70a3dp+0 (;=1.64;))
      (i32.const 7))
  )
  (func (;30;) (type $out-i32) (result i32)
    (call_indirect (type $f32-i32)
      (f32.const 0x1.00ccccp+5 (;=32.1;))
      (i32.const 32)
      (i32.const 8))
  )
  (func (;31;) (type $out-i64) (result i64)
    (call_indirect (type $i32-i64)
      (i32.const 32)
      (i64.const 64)
      (i32.const 9))
  )
  (func (;32;) (type $out-f32) (result f32)
    (call_indirect (type $f64-f32)
      (f64.const 0x1p+6 (;=64;))
      (f32.const 0x1p+5 (;=32;))
      (i32.const 10))
  )
  (func (;33;) (type $out-f64) (result f64)
    (call_indirect (type $i64-f64)
      (i64.const 64)
      (f64.const 0x1.0066666666666p+6 (;=64.1;))
      (i32.const 11))
  )
  (func (;34;) (type $out-f64-i32) (result f64 i32)
    (call_indirect (type $out-f64-i32)
      (i32.const 29))
  )
  (func (;35;) (type 24) (result i32 f64)
    (call_indirect (type $over-i32-f64)
      (i32.const 1)
      (f64.const 0x1p+1 (;=2;))
      (i32.const 30))
  )
  (func (;36;) (type 25) (result i64 i32)
    (call_indirect (type $swap-i32-i64)
      (i32.const 1)
      (i64.const 2)
      (i32.const 31))
  )
  (func (;37;) (type $i32-i64) (param i32 i64) (result i64)
    (call_indirect (type $over-i64)
      (local.get 1)
      (local.get 0))
  )
  (func (;38;) (type 26) (param i32) (result i64)
    (call_indirect (type $over-i64-duplicate)
      (i64.const 9)
      (local.get 0))
  )
  (func (;39;) (type $over-i32) (param i32) (result i32)
    (call_indirect (type $over-i32-duplicate)
      (i32.const 9)
      (local.get 0))
  )
  (func (;40;) (type 27) (param i32) (result f32)
    (call_indirect (type $over-f32-duplicate)
      (f32.const 0x1.2p+3 (;=9;))
      (local.get 0))
  )
  (func (;41;) (type 28) (param i32) (result f64)
    (call_indirect (type $over-f64-duplicate)
      (f64.const 0x1.2p+3 (;=9;))
      (local.get 0))
  )
  (func $fac-i64 (;42;) (type $over-i64) (param i64) (result i64)
    (if (result i64) ;; label = @1
      (i64.eqz
        (local.get 0))
      (then
        (i64.const 1))
      (else
        (i64.mul
          (local.get 0)
          (call_indirect (type $over-i64)
            (i64.sub
              (local.get 0)
              (i64.const 1))
            (i32.const 12)))))
  )
  (func $fib-i64 (;43;) (type $over-i64) (param i64) (result i64)
    (if (result i64) ;; label = @1
      (i64.le_u
        (local.get 0)
        (i64.const 1))
      (then
        (i64.const 1))
      (else
        (i64.add
          (call_indirect (type $over-i64)
            (i64.sub
              (local.get 0)
              (i64.const 2))
            (i32.const 13))
          (call_indirect (type $over-i64)
            (i64.sub
              (local.get 0)
              (i64.const 1))
            (i32.const 13)))))
  )
  (func $fac-i32 (;44;) (type $over-i32) (param i32) (result i32)
    (if (result i32) ;; label = @1
      (i32.eqz
        (local.get 0))
      (then
        (i32.const 1))
      (else
        (i32.mul
          (local.get 0)
          (call_indirect (type $over-i32)
            (i32.sub
              (local.get 0)
              (i32.const 1))
            (i32.const 23)))))
  )
  (func $fac-f32 (;45;) (type $over-f32) (param f32) (result f32)
    (if (result f32) ;; label = @1
      (f32.eq
        (local.get 0)
        (f32.const 0x0p+0 (;=0;)))
      (then
        (f32.const 0x1p+0 (;=1;)))
      (else
        (f32.mul
          (local.get 0)
          (call_indirect (type $over-f32)
            (f32.sub
              (local.get 0)
              (f32.const 0x1p+0 (;=1;)))
            (i32.const 24)))))
  )
  (func $fac-f64 (;46;) (type $over-f64) (param f64) (result f64)
    (if (result f64) ;; label = @1
      (f64.eq
        (local.get 0)
        (f64.const 0x0p+0 (;=0;)))
      (then
        (f64.const 0x1p+0 (;=1;)))
      (else
        (f64.mul
          (local.get 0)
          (call_indirect (type $over-f64)
            (f64.sub
              (local.get 0)
              (f64.const 0x1p+0 (;=1;)))
            (i32.const 25)))))
  )
  (func $fib-i32 (;47;) (type $over-i32) (param i32) (result i32)
    (if (result i32) ;; label = @1
      (i32.le_u
        (local.get 0)
        (i32.const 1))
      (then
        (i32.const 1))
      (else
        (i32.add
          (call_indirect (type $over-i32)
            (i32.sub
              (local.get 0)
              (i32.const 2))
            (i32.const 26))
          (call_indirect (type $over-i32)
            (i32.sub
              (local.get 0)
              (i32.const 1))
            (i32.const 26)))))
  )
  (func $fib-f32 (;48;) (type $over-f32) (param f32) (result f32)
    (if (result f32) ;; label = @1
      (f32.le
        (local.get 0)
        (f32.const 0x1p+0 (;=1;)))
      (then
        (f32.const 0x1p+0 (;=1;)))
      (else
        (f32.add
          (call_indirect (type $over-f32)
            (f32.sub
              (local.get 0)
              (f32.const 0x1p+1 (;=2;)))
            (i32.const 27))
          (call_indirect (type $over-f32)
            (f32.sub
              (local.get 0)
              (f32.const 0x1p+0 (;=1;)))
            (i32.const 27)))))
  )
  (func $fib-f64 (;49;) (type $over-f64) (param f64) (result f64)
    (if (result f64) ;; label = @1
      (f64.le
        (local.get 0)
        (f64.const 0x1p+0 (;=1;)))
      (then
        (f64.const 0x1p+0 (;=1;)))
      (else
        (f64.add
          (call_indirect (type $over-f64)
            (f64.sub
              (local.get 0)
              (f64.const 0x1p+1 (;=2;)))
            (i32.const 28))
          (call_indirect (type $over-f64)
            (f64.sub
              (local.get 0)
              (f64.const 0x1p+0 (;=1;)))
            (i32.const 28)))))
  )
  (func $even (;50;) (type $over-i32) (param i32) (result i32)
    (if (result i32) ;; label = @1
      (i32.eqz
        (local.get 0))
      (then
        (i32.const 44))
      (else
        (call_indirect (type $over-i32)
          (i32.sub
            (local.get 0)
            (i32.const 1))
          (i32.const 15))))
  )
  (func $odd (;51;) (type $over-i32) (param i32) (result i32)
    (if (result i32) ;; label = @1
      (i32.eqz
        (local.get 0))
      (then
        (i32.const 99))
      (else
        (call_indirect (type $over-i32)
          (i32.sub
            (local.get 0)
            (i32.const 1))
          (i32.const 14))))
  )
  (func $runaway (;52;) (type $proc)
    (call_indirect (type $proc)
      (i32.const 16))
  )
  (func $mutual-runaway1 (;53;) (type $proc)
    (call_indirect (type $proc)
      (i32.const 18))
  )
  (func $mutual-runaway2 (;54;) (type $proc)
    (call_indirect (type $proc)
      (i32.const 17))
  )
  (func (;55;) (type $out-i32) (result i32)
    (select
      (call_indirect (type $out-i32)
        (i32.const 0))
      (i32.const 2)
      (i32.const 3))
  )
  (func (;56;) (type $out-i32) (result i32)
    (select
      (i32.const 2)
      (call_indirect (type $out-i32)
        (i32.const 0))
      (i32.const 3))
  )
  (func (;57;) (type $out-i32) (result i32)
    (select
      (i32.const 2)
      (i32.const 3)
      (call_indirect (type $out-i32)
        (i32.const 0)))
  )
  (func (;58;) (type $out-i32) (result i32)
    (if (result i32) ;; label = @1
      (call_indirect (type $out-i32)
        (i32.const 0))
      (then
        (i32.const 1))
      (else
        (i32.const 2)))
  )
  (func (;59;) (type $out-i64) (result i64)
    (block (result i64) ;; label = @1
      (br_if 0 (;@1;)
        (call_indirect (type $out-i64)
          (i32.const 1))
        (i32.const 2)))
  )
  (func (;60;) (type $out-i32) (result i32)
    (block (result i32) ;; label = @1
      (br_if 0 (;@1;)
        (i32.const 2)
        (call_indirect (type $out-i32)
          (i32.const 0))))
  )
  (func (;61;) (type $out-f32) (result f32)
    (block (result f32) ;; label = @1
      (br_table 0 (;@1;) 0 (;@1;)
        (call_indirect (type $out-f32)
          (i32.const 2))
        (i32.const 2)))
  )
  (func (;62;) (type $out-i32) (result i32)
    (block (result i32) ;; label = @1
      (br_table 0 (;@1;) 0 (;@1;)
        (i32.const 2)
        (call_indirect (type $out-i32)
          (i32.const 0))))
  )
  (func (;63;) (type $proc)
    (i32.store
      (call_indirect (type $out-i32)
        (i32.const 0))
      (i32.const 1))
  )
  (func (;64;) (type $proc)
    (f64.store
      (i32.const 10)
      (call_indirect (type $out-f64)
        (i32.const 3)))
  )
  (func (;65;) (type $out-i32) (result i32)
    (memory.grow
      (call_indirect (type $out-i32)
        (i32.const 0)))
  )
  (func (;66;) (type $out-i32) (result i32)
    (return
      (call_indirect (type $over-i32)
        (i32.const 1)
        (i32.const 4)))
  )
  (func (;67;) (type $proc)
    (drop
      (call_indirect (type $over-i64)
        (i64.const 1)
        (i32.const 5)))
  )
  (func (;68;) (type $out-f32) (result f32)
    (block (result f32) ;; label = @1
      (br 0 (;@1;)
        (call_indirect (type $over-f32)
          (f32.const 0x1p+0 (;=1;))
          (i32.const 6))))
  )
  (func (;69;) (type $out-f64) (result f64)
    (local f64)
    (local.set 0
      (call_indirect (type $over-f64)
        (f64.const 0x1p+0 (;=1;))
        (i32.const 7)))
    (local.get 0)
  )
  (func (;70;) (type $out-f64) (result f64)
    (local f64)
    (local.tee 0
      (call_indirect (type $over-f64)
        (f64.const 0x1p+0 (;=1;))
        (i32.const 7)))
  )
  (func (;71;) (type $out-f64) (result f64)
    (global.set $a
      (call_indirect (type $over-f64)
        (f64.const 0x1p+0 (;=1;))
        (i32.const 7)))
    (global.get $a)
  )
  (func (;72;) (type $out-i32) (result i32)
    (i32.load
      (call_indirect (type $out-i32)
        (i32.const 0)))
  )
  (func (;73;) (type $out-f32) (result f32)
    (block (result f32) ;; label = @1
      (f32.sqrt
        (call_indirect (type $over-f32)
          (f32.const 0x0p+0 (;=0;))
          (i32.const 6))))
  )
  (func (;74;) (type $out-i32) (result i32)
    (block (result i32) ;; label = @1
      (i32.add
        (call_indirect (type $over-i32)
          (i32.const 1)
          (i32.const 4))
        (i32.const 10)))
  )
  (func (;75;) (type $out-i32) (result i32)
    (block (result i32) ;; label = @1
      (i32.sub
        (i32.const 10)
        (call_indirect (type $over-i32)
          (i32.const 1)
          (i32.const 4))))
  )
  (func (;76;) (type $out-i32) (result i32)
    (block (result i32) ;; label = @1
      (i32.eqz
        (call_indirect (type $over-i32)
          (i32.const 1)
          (i32.const 4))))
  )
  (func (;77;) (type $out-i32) (result i32)
    (block (result i32) ;; label = @1
      (i32.le_u
        (call_indirect (type $over-i32)
          (i32.const 1)
          (i32.const 4))
        (i32.const 10)))
  )
  (func (;78;) (type $out-i32) (result i32)
    (block (result i32) ;; label = @1
      (i32.ne
        (i32.const 10)
        (call_indirect (type $over-i32)
          (i32.const 1)
          (i32.const 4))))
  )
  (func (;79;) (type $out-i64) (result i64)
    (block (result i64) ;; label = @1
      (i64.extend_i32_s
        (call_indirect (type $over-i32)
          (i32.const 1)
          (i32.const 4))))
  )
)
