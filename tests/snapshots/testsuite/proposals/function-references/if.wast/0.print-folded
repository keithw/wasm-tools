(module
  (type $check (;0;) (func (param i32 i32) (result i32)))
  (type $block-sig-1 (;1;) (func))
  (type $block-sig-2 (;2;) (func (result i32)))
  (type $block-sig-3 (;3;) (func (param i32)))
  (type $block-sig-4 (;4;) (func (param i32 f64 i32) (result i32 f64 i32)))
  (type (;5;) (func (param i32) (result i32)))
  (type (;6;) (func (param i32) (result i32 i32)))
  (type (;7;) (func (result i32 i64 i32)))
  (type (;8;) (func (result i32 i32)))
  (type (;9;) (func (result f32 f32)))
  (type (;10;) (func (param i32) (result i32 i32 i64)))
  (type (;11;) (func (result i32 i32 i64)))
  (type (;12;) (func (param i32 i32) (result i32 i32)))
  (type (;13;) (func (param i64 i64 i32) (result i64 i32)))
  (type (;14;) (func (param i64 i64) (result i64)))
  (type (;15;) (func (param i64) (result i64)))
  (table (;0;) 1 1 funcref)
  (memory (;0;) 1)
  (global $a (;0;) (mut i32) (i32.const 10))
  (export "empty" (func 1))
  (export "singular" (func 2))
  (export "multi" (func 3))
  (export "nested" (func 4))
  (export "as-select-first" (func 5))
  (export "as-select-mid" (func 6))
  (export "as-select-last" (func 7))
  (export "as-loop-first" (func 8))
  (export "as-loop-mid" (func 9))
  (export "as-loop-last" (func 10))
  (export "as-if-condition" (func 11))
  (export "as-br_if-first" (func 12))
  (export "as-br_if-last" (func 13))
  (export "as-br_table-first" (func 14))
  (export "as-br_table-last" (func 15))
  (export "as-call_indirect-first" (func 17))
  (export "as-call_indirect-mid" (func 18))
  (export "as-call_indirect-last" (func 19))
  (export "as-store-first" (func 20))
  (export "as-store-last" (func 21))
  (export "as-memory.grow-value" (func 22))
  (export "as-call-value" (func 24))
  (export "as-return-value" (func 25))
  (export "as-drop-operand" (func 26))
  (export "as-br-value" (func 27))
  (export "as-local.set-value" (func 28))
  (export "as-local.tee-value" (func 29))
  (export "as-global.set-value" (func 30))
  (export "as-load-operand" (func 31))
  (export "as-unary-operand" (func 32))
  (export "as-binary-operand" (func 33))
  (export "as-test-operand" (func 34))
  (export "as-compare-operand" (func 35))
  (export "as-binary-operands" (func 36))
  (export "as-compare-operands" (func 37))
  (export "as-mixed-operands" (func 38))
  (export "break-bare" (func 39))
  (export "break-value" (func 40))
  (export "break-multi-value" (func 41))
  (export "param" (func 42))
  (export "params" (func 43))
  (export "params-id" (func 44))
  (export "param-break" (func 45))
  (export "params-break" (func 46))
  (export "params-id-break" (func 47))
  (export "effects" (func 48))
  (export "add64_u_with_carry" (func $add64_u_with_carry))
  (export "add64_u_saturated" (func $add64_u_saturated))
  (export "type-use" (func 51))
  (export "atypical-condition" (func 52))
  (elem (;0;) (table 0) (i32.const 0) func $func)
  (func $dummy (;0;) (type $block-sig-1))
  (func (;1;) (type $block-sig-3) (param i32)
    (if ;; label = @1
      (local.get 0)
      (then))
    (if ;; label = @1
      (local.get 0)
      (then)
      (else))
    (if $l
      (local.get 0)
      (then))
    (if $l
      (local.get 0)
      (then)
      (else))
  )
  (func (;2;) (type 5) (param i32) (result i32)
    (if ;; label = @1
      (local.get 0)
      (then
        (nop)))
    (if ;; label = @1
      (local.get 0)
      (then
        (nop))
      (else
        (nop)))
    (if (result i32) ;; label = @1
      (local.get 0)
      (then
        (i32.const 7))
      (else
        (i32.const 8)))
  )
  (func (;3;) (type 6) (param i32) (result i32 i32)
    (if ;; label = @1
      (local.get 0)
      (then
        (call $dummy)
        (call $dummy)
        (call $dummy)))
    (if ;; label = @1
      (local.get 0)
      (then)
      (else
        (call $dummy)
        (call $dummy)
        (call $dummy)))
    (if (result i32) ;; label = @1
      (local.get 0)
      (then
        (call $dummy)
        (call $dummy)
        (i32.const 8)
        (call $dummy))
      (else
        (call $dummy)
        (call $dummy)
        (i32.const 9)
        (call $dummy)))
    (if (type 7) (result i32 i64 i32) ;; label = @1
      (local.get 0)
      (then
        (call $dummy)
        (call $dummy)
        (i32.const 1)
        (call $dummy)
        (call $dummy)
        (call $dummy)
        (i64.const 2)
        (call $dummy)
        (call $dummy)
        (call $dummy)
        (i32.const 3)
        (call $dummy))
      (else
        (call $dummy)
        (call $dummy)
        (i32.const -1)
        (call $dummy)
        (call $dummy)
        (call $dummy)
        (i64.const -2)
        (call $dummy)
        (call $dummy)
        (call $dummy)
        (i32.const -3)
        (call $dummy)))
    (drop)
    (drop)
  )
  (func (;4;) (type $check) (param i32 i32) (result i32)
    (if (result i32) ;; label = @1
      (local.get 0)
      (then
        (if ;; label = @2
          (local.get 1)
          (then
            (call $dummy)
            (block ;; label = @3
            )
            (nop)))
        (if ;; label = @2
          (local.get 1)
          (then)
          (else
            (call $dummy)
            (block ;; label = @3
            )
            (nop)))
        (if (result i32) ;; label = @2
          (local.get 1)
          (then
            (call $dummy)
            (i32.const 9))
          (else
            (call $dummy)
            (i32.const 10))))
      (else
        (if ;; label = @2
          (local.get 1)
          (then
            (call $dummy)
            (block ;; label = @3
            )
            (nop)))
        (if ;; label = @2
          (local.get 1)
          (then)
          (else
            (call $dummy)
            (block ;; label = @3
            )
            (nop)))
        (if (result i32) ;; label = @2
          (local.get 1)
          (then
            (call $dummy)
            (i32.const 10))
          (else
            (call $dummy)
            (i32.const 11)))))
  )
  (func (;5;) (type 5) (param i32) (result i32)
    (select
      (if (result i32) ;; label = @1
        (local.get 0)
        (then
          (call $dummy)
          (i32.const 1))
        (else
          (call $dummy)
          (i32.const 0)))
      (i32.const 2)
      (i32.const 3))
  )
  (func (;6;) (type 5) (param i32) (result i32)
    (select
      (i32.const 2)
      (if (result i32) ;; label = @1
        (local.get 0)
        (then
          (call $dummy)
          (i32.const 1))
        (else
          (call $dummy)
          (i32.const 0)))
      (i32.const 3))
  )
  (func (;7;) (type 5) (param i32) (result i32)
    (select
      (i32.const 2)
      (i32.const 3)
      (if (result i32) ;; label = @1
        (local.get 0)
        (then
          (call $dummy)
          (i32.const 1))
        (else
          (call $dummy)
          (i32.const 0))))
  )
  (func (;8;) (type 5) (param i32) (result i32)
    (loop (result i32) ;; label = @1
      (if (result i32) ;; label = @2
        (local.get 0)
        (then
          (call $dummy)
          (i32.const 1))
        (else
          (call $dummy)
          (i32.const 0)))
      (call $dummy)
      (call $dummy))
  )
  (func (;9;) (type 5) (param i32) (result i32)
    (loop (result i32) ;; label = @1
      (call $dummy)
      (if (result i32) ;; label = @2
        (local.get 0)
        (then
          (call $dummy)
          (i32.const 1))
        (else
          (call $dummy)
          (i32.const 0)))
      (call $dummy))
  )
  (func (;10;) (type 5) (param i32) (result i32)
    (loop (result i32) ;; label = @1
      (call $dummy)
      (call $dummy)
      (if (result i32) ;; label = @2
        (local.get 0)
        (then
          (call $dummy)
          (i32.const 1))
        (else
          (call $dummy)
          (i32.const 0))))
  )
  (func (;11;) (type 5) (param i32) (result i32)
    (if (result i32) ;; label = @1
      (if (result i32) ;; label = @1
        (local.get 0)
        (then
          (i32.const 1))
        (else
          (i32.const 0)))
      (then
        (call $dummy)
        (i32.const 2))
      (else
        (call $dummy)
        (i32.const 3)))
  )
  (func (;12;) (type 5) (param i32) (result i32)
    (block (result i32) ;; label = @1
      (br_if 0 (;@1;)
        (if (result i32) ;; label = @2
          (local.get 0)
          (then
            (call $dummy)
            (i32.const 1))
          (else
            (call $dummy)
            (i32.const 0)))
        (i32.const 2))
      (return
        (i32.const 3)))
  )
  (func (;13;) (type 5) (param i32) (result i32)
    (block (result i32) ;; label = @1
      (br_if 0 (;@1;)
        (i32.const 2)
        (if (result i32) ;; label = @2
          (local.get 0)
          (then
            (call $dummy)
            (i32.const 1))
          (else
            (call $dummy)
            (i32.const 0))))
      (return
        (i32.const 3)))
  )
  (func (;14;) (type 5) (param i32) (result i32)
    (block (result i32) ;; label = @1
      (br_table 0 (;@1;) 0 (;@1;)
        (if (result i32) ;; label = @2
          (local.get 0)
          (then
            (call $dummy)
            (i32.const 1))
          (else
            (call $dummy)
            (i32.const 0)))
        (i32.const 2)))
  )
  (func (;15;) (type 5) (param i32) (result i32)
    (block (result i32) ;; label = @1
      (br_table 0 (;@1;) 0 (;@1;)
        (i32.const 2)
        (if (result i32) ;; label = @2
          (local.get 0)
          (then
            (call $dummy)
            (i32.const 1))
          (else
            (call $dummy)
            (i32.const 0)))))
  )
  (func $func (;16;) (type $check) (param i32 i32) (result i32)
    (local.get 0)
  )
  (func (;17;) (type 5) (param i32) (result i32)
    (block (result i32) ;; label = @1
      (call_indirect (type $check)
        (if (result i32) ;; label = @2
          (local.get 0)
          (then
            (call $dummy)
            (i32.const 1))
          (else
            (call $dummy)
            (i32.const 0)))
        (i32.const 2)
        (i32.const 0)))
  )
  (func (;18;) (type 5) (param i32) (result i32)
    (block (result i32) ;; label = @1
      (call_indirect (type $check)
        (i32.const 2)
        (if (result i32) ;; label = @2
          (local.get 0)
          (then
            (call $dummy)
            (i32.const 1))
          (else
            (call $dummy)
            (i32.const 0)))
        (i32.const 0)))
  )
  (func (;19;) (type 5) (param i32) (result i32)
    (block (result i32) ;; label = @1
      (call_indirect (type $check)
        (i32.const 2)
        (i32.const 0)
        (if (result i32) ;; label = @2
          (local.get 0)
          (then
            (call $dummy)
            (i32.const 1))
          (else
            (call $dummy)
            (i32.const 0)))))
  )
  (func (;20;) (type $block-sig-3) (param i32)
    (i32.store
      (if (result i32) ;; label = @1
        (local.get 0)
        (then
          (call $dummy)
          (i32.const 1))
        (else
          (call $dummy)
          (i32.const 0)))
      (i32.const 2))
  )
  (func (;21;) (type $block-sig-3) (param i32)
    (i32.store
      (i32.const 2)
      (if (result i32) ;; label = @1
        (local.get 0)
        (then
          (call $dummy)
          (i32.const 1))
        (else
          (call $dummy)
          (i32.const 0))))
  )
  (func (;22;) (type 5) (param i32) (result i32)
    (memory.grow
      (if (result i32) ;; label = @1
        (local.get 0)
        (then
          (i32.const 1))
        (else
          (i32.const 0))))
  )
  (func $f (;23;) (type 5) (param i32) (result i32)
    (local.get 0)
  )
  (func (;24;) (type 5) (param i32) (result i32)
    (call $f
      (if (result i32) ;; label = @1
        (local.get 0)
        (then
          (i32.const 1))
        (else
          (i32.const 0))))
  )
  (func (;25;) (type 5) (param i32) (result i32)
    (return
      (if (result i32) ;; label = @1
        (local.get 0)
        (then
          (i32.const 1))
        (else
          (i32.const 0))))
  )
  (func (;26;) (type $block-sig-3) (param i32)
    (drop
      (if (result i32) ;; label = @1
        (local.get 0)
        (then
          (i32.const 1))
        (else
          (i32.const 0))))
  )
  (func (;27;) (type 5) (param i32) (result i32)
    (block (result i32) ;; label = @1
      (br 0 (;@1;)
        (if (result i32) ;; label = @2
          (local.get 0)
          (then
            (i32.const 1))
          (else
            (i32.const 0)))))
  )
  (func (;28;) (type 5) (param i32) (result i32)
    (local i32)
    (local.set 0
      (if (result i32) ;; label = @1
        (local.get 0)
        (then
          (i32.const 1))
        (else
          (i32.const 0))))
    (local.get 0)
  )
  (func (;29;) (type 5) (param i32) (result i32)
    (local.tee 0
      (if (result i32) ;; label = @1
        (local.get 0)
        (then
          (i32.const 1))
        (else
          (i32.const 0))))
  )
  (func (;30;) (type 5) (param i32) (result i32)
    (global.set $a
      (if (result i32) ;; label = @1
        (local.get 0)
        (then
          (i32.const 1))
        (else
          (i32.const 0))))
    (global.get $a)
  )
  (func (;31;) (type 5) (param i32) (result i32)
    (i32.load
      (if (result i32) ;; label = @1
        (local.get 0)
        (then
          (i32.const 11))
        (else
          (i32.const 10))))
  )
  (func (;32;) (type 5) (param i32) (result i32)
    (i32.ctz
      (if (result i32) ;; label = @1
        (local.get 0)
        (then
          (call $dummy)
          (i32.const 13))
        (else
          (call $dummy)
          (i32.const -13))))
  )
  (func (;33;) (type $check) (param i32 i32) (result i32)
    (i32.mul
      (if (result i32) ;; label = @1
        (local.get 0)
        (then
          (call $dummy)
          (i32.const 3))
        (else
          (call $dummy)
          (i32.const -3)))
      (if (result i32) ;; label = @1
        (local.get 1)
        (then
          (call $dummy)
          (i32.const 4))
        (else
          (call $dummy)
          (i32.const -5))))
  )
  (func (;34;) (type 5) (param i32) (result i32)
    (i32.eqz
      (if (result i32) ;; label = @1
        (local.get 0)
        (then
          (call $dummy)
          (i32.const 13))
        (else
          (call $dummy)
          (i32.const 0))))
  )
  (func (;35;) (type $check) (param i32 i32) (result i32)
    (f32.gt
      (if (result f32) ;; label = @1
        (local.get 0)
        (then
          (call $dummy)
          (f32.const 0x1.8p+1 (;=3;)))
        (else
          (call $dummy)
          (f32.const -0x1.8p+1 (;=-3;))))
      (if (result f32) ;; label = @1
        (local.get 1)
        (then
          (call $dummy)
          (f32.const 0x1p+2 (;=4;)))
        (else
          (call $dummy)
          (f32.const -0x1p+2 (;=-4;)))))
  )
  (func (;36;) (type 5) (param i32) (result i32)
    (i32.mul
      (if (type 8) (result i32 i32) ;; label = @1
        (local.get 0)
        (then
          (call $dummy)
          (i32.const 3)
          (call $dummy)
          (i32.const 4))
        (else
          (call $dummy)
          (i32.const 3)
          (call $dummy)
          (i32.const -4))))
  )
  (func (;37;) (type 5) (param i32) (result i32)
    (f32.gt
      (if (type 9) (result f32 f32) ;; label = @1
        (local.get 0)
        (then
          (call $dummy)
          (f32.const 0x1.8p+1 (;=3;))
          (call $dummy)
          (f32.const 0x1.8p+1 (;=3;)))
        (else
          (call $dummy)
          (f32.const -0x1p+1 (;=-2;))
          (call $dummy)
          (f32.const -0x1.8p+1 (;=-3;)))))
  )
  (func (;38;) (type 5) (param i32) (result i32)
    (if (type 8) (result i32 i32) ;; label = @1
      (local.get 0)
      (then
        (call $dummy)
        (i32.const 3)
        (call $dummy)
        (i32.const 4))
      (else
        (call $dummy)
        (i32.const -3)
        (call $dummy)
        (i32.const -4)))
    (i32.const 5)
    (i32.add)
    (i32.mul)
  )
  (func (;39;) (type $block-sig-2) (result i32)
    (if ;; label = @1
      (i32.const 1)
      (then
        (br 0 (;@1;))
        (unreachable)))
    (if ;; label = @1
      (i32.const 1)
      (then
        (br 0 (;@1;))
        (unreachable))
      (else
        (unreachable)))
    (if ;; label = @1
      (i32.const 0)
      (then
        (unreachable))
      (else
        (br 0 (;@1;))
        (unreachable)))
    (if ;; label = @1
      (i32.const 1)
      (then
        (br_if 0 (;@1;)
          (i32.const 1))
        (unreachable)))
    (if ;; label = @1
      (i32.const 1)
      (then
        (br_if 0 (;@1;)
          (i32.const 1))
        (unreachable))
      (else
        (unreachable)))
    (if ;; label = @1
      (i32.const 0)
      (then
        (unreachable))
      (else
        (br_if 0 (;@1;)
          (i32.const 1))
        (unreachable)))
    (if ;; label = @1
      (i32.const 1)
      (then
        (br_table 0 (;@1;)
          (i32.const 0))
        (unreachable)))
    (if ;; label = @1
      (i32.const 1)
      (then
        (br_table 0 (;@1;)
          (i32.const 0))
        (unreachable))
      (else
        (unreachable)))
    (if ;; label = @1
      (i32.const 0)
      (then
        (unreachable))
      (else
        (br_table 0 (;@1;)
          (i32.const 0))
        (unreachable)))
    (i32.const 19)
  )
  (func (;40;) (type 5) (param i32) (result i32)
    (if (result i32) ;; label = @1
      (local.get 0)
      (then
        (br 0 (;@1;)
          (i32.const 18))
        (i32.const 19))
      (else
        (br 0 (;@1;)
          (i32.const 21))
        (i32.const 20)))
  )
  (func (;41;) (type 10) (param i32) (result i32 i32 i64)
    (if (type 11) (result i32 i32 i64) ;; label = @1
      (local.get 0)
      (then
        (br 0 (;@1;)
          (i32.const 18)
          (i32.const -18)
          (i64.const 18))
        (i32.const 19)
        (i32.const -19)
        (i64.const 19))
      (else
        (br 0 (;@1;)
          (i32.const -18)
          (i32.const 18)
          (i64.const -18))
        (i32.const -19)
        (i32.const 19)
        (i64.const -19)))
  )
  (func (;42;) (type 5) (param i32) (result i32)
    (i32.const 1)
    (if (type 5) (param i32) (result i32) ;; label = @1
      (local.get 0)
      (then
        (i32.const 2)
        (i32.add))
      (else
        (i32.const -2)
        (i32.add)))
  )
  (func (;43;) (type 5) (param i32) (result i32)
    (i32.const 1)
    (i32.const 2)
    (if (type $check) (param i32 i32) (result i32) ;; label = @1
      (local.get 0)
      (then
        (i32.add))
      (else
        (i32.sub)))
  )
  (func (;44;) (type 5) (param i32) (result i32)
    (i32.const 1)
    (i32.const 2)
    (if (type 12) (param i32 i32) (result i32 i32) ;; label = @1
      (local.get 0)
      (then))
    (i32.add)
  )
  (func (;45;) (type 5) (param i32) (result i32)
    (i32.const 1)
    (if (type 5) (param i32) (result i32) ;; label = @1
      (local.get 0)
      (then
        (i32.const 2)
        (br 0 (;@1;)
          (i32.add)))
      (else
        (i32.const -2)
        (br 0 (;@1;)
          (i32.add))))
  )
  (func (;46;) (type 5) (param i32) (result i32)
    (i32.const 1)
    (i32.const 2)
    (if (type $check) (param i32 i32) (result i32) ;; label = @1
      (local.get 0)
      (then
        (br 0 (;@1;)
          (i32.add)))
      (else
        (br 0 (;@1;)
          (i32.sub))))
  )
  (func (;47;) (type 5) (param i32) (result i32)
    (i32.const 1)
    (i32.const 2)
    (if (type 12) (param i32 i32) (result i32 i32) ;; label = @1
      (local.get 0)
      (then
        (br 0 (;@1;))))
    (i32.add)
  )
  (func (;48;) (type 5) (param i32) (result i32)
    (local i32)
    (if ;; label = @1
      (block (result i32) ;; label = @1
        (local.set 1
          (i32.const 1))
        (local.get 0))
      (then
        (local.set 1
          (i32.mul
            (local.get 1)
            (i32.const 3)))
        (local.set 1
          (i32.sub
            (local.get 1)
            (i32.const 5)))
        (local.set 1
          (i32.mul
            (local.get 1)
            (i32.const 7)))
        (br 0 (;@1;))
        (local.set 1
          (i32.mul
            (local.get 1)
            (i32.const 100))))
      (else
        (local.set 1
          (i32.mul
            (local.get 1)
            (i32.const 5)))
        (local.set 1
          (i32.sub
            (local.get 1)
            (i32.const 7)))
        (local.set 1
          (i32.mul
            (local.get 1)
            (i32.const 3)))
        (br 0 (;@1;))
        (local.set 1
          (i32.mul
            (local.get 1)
            (i32.const 1000)))))
    (local.get 1)
  )
  (func $add64_u_with_carry (;49;) (type 13) (param $i i64) (param $j i64) (param $c i32) (result i64 i32)
    (local $k i64)
    (local.set $k
      (i64.add
        (i64.add
          (local.get $i)
          (local.get $j))
        (i64.extend_i32_u
          (local.get $c))))
    (return
      (local.get $k)
      (i64.lt_u
        (local.get $k)
        (local.get $i)))
  )
  (func $add64_u_saturated (;50;) (type 14) (param i64 i64) (result i64)
    (if (type 15) (param i64) (result i64) ;; label = @1
      (call $add64_u_with_carry
        (local.get 0)
        (local.get 1)
        (i32.const 0))
      (then
        (drop)
        (i64.const -1)))
  )
  (func (;51;) (type $block-sig-1)
    (if (type $block-sig-1) ;; label = @1
      (i32.const 1)
      (then))
    (if (type $block-sig-2) (result i32) ;; label = @1
      (i32.const 1)
      (then
        (i32.const 0))
      (else
        (i32.const 2)))
    (if (type $block-sig-3) (param i32) ;; label = @1
      (i32.const 1)
      (then
        (drop))
      (else
        (drop)))
    (i32.const 0)
    (f64.const 0x0p+0 (;=0;))
    (i32.const 0)
    (if (type $block-sig-4) (param i32 f64 i32) (result i32 f64 i32) ;; label = @1
      (i32.const 1)
      (then))
    (drop)
    (drop)
    (drop)
    (if (type $block-sig-2) (result i32) ;; label = @1
      (i32.const 1)
      (then
        (i32.const 0))
      (else
        (i32.const 2)))
    (if (type $block-sig-3) (param i32) ;; label = @1
      (i32.const 1)
      (then
        (drop))
      (else
        (drop)))
    (i32.const 0)
    (f64.const 0x0p+0 (;=0;))
    (i32.const 0)
    (if (type $block-sig-4) (param i32 f64 i32) (result i32 f64 i32) ;; label = @1
      (i32.const 1)
      (then))
    (drop)
    (drop)
    (drop)
  )
  (func (;52;) (type $block-sig-1)
    (if ;; label = @1
      (i32.const 0)
      (then)
      (else))
    (if ;; label = @1
      (i32.eqz
        (i32.const 1))
      (then)
      (else))
  )
)
