(module
  (type $ii (;0;) (func (param i32) (result i32)))
  (type $ll (;1;) (func (param i64) (result i64)))
  (type $lll (;2;) (func (param i64 i64) (result i64)))
  (type (;3;) (func (param (ref $ii) i32) (result i32)))
  (type (;4;) (func (result i32)))
  (global $fac (;0;) (ref $ll) (ref.func $fac))
  (global $fac-acc (;1;) (ref $lll) (ref.func $fac-acc))
  (global $fib (;2;) (ref $ll) (ref.func $fib))
  (global $even (;3;) (ref $ll) (ref.func $even))
  (global $odd (;4;) (ref $ll) (ref.func $odd))
  (export "run" (func 3))
  (export "null" (func 4))
  (export "fac" (func $fac))
  (export "fac-acc" (func $fac-acc))
  (export "fib" (func $fib))
  (export "even" (func $even))
  (export "odd" (func $odd))
  (elem (;0;) declare func $f $g)
  (elem (;1;) declare func $fac)
  (elem (;2;) declare func $fac-acc)
  (elem (;3;) declare func $fib)
  (elem (;4;) declare func $even $odd)
  (func $apply (;0;) (type 3) (param $f (ref $ii)) (param $x i32) (result i32)
    (call_ref $ii
      (local.get $x)
      (local.get $f))
  )
  (func $f (;1;) (type $ii) (param i32) (result i32)
    (i32.mul
      (local.get 0)
      (local.get 0))
  )
  (func $g (;2;) (type $ii) (param i32) (result i32)
    (i32.sub
      (i32.const 0)
      (local.get 0))
  )
  (func (;3;) (type $ii) (param $x i32) (result i32)
    (local $rf (ref null $ii)) (local $rg (ref null $ii))
    (local.set $rf
      (ref.func $f))
    (local.set $rg
      (ref.func $g))
    (call_ref $ii
      (call_ref $ii
        (local.get $x)
        (local.get $rf))
      (local.get $rg))
  )
  (func (;4;) (type 4) (result i32)
    (call_ref $ii
      (i32.const 1)
      (ref.null $ii))
  )
  (func $fac (;5;) (type $ll) (param i64) (result i64)
    (if (result i64) ;; label = @1
      (i64.eqz
        (local.get 0))
      (then
        (i64.const 1))
      (else
        (i64.mul
          (local.get 0)
          (call_ref $ll
            (i64.sub
              (local.get 0)
              (i64.const 1))
            (global.get $fac)))))
  )
  (func $fac-acc (;6;) (type $lll) (param i64 i64) (result i64)
    (if (result i64) ;; label = @1
      (i64.eqz
        (local.get 0))
      (then
        (local.get 1))
      (else
        (call_ref $lll
          (i64.sub
            (local.get 0)
            (i64.const 1))
          (i64.mul
            (local.get 0)
            (local.get 1))
          (global.get $fac-acc))))
  )
  (func $fib (;7;) (type $ll) (param i64) (result i64)
    (if (result i64) ;; label = @1
      (i64.le_u
        (local.get 0)
        (i64.const 1))
      (then
        (i64.const 1))
      (else
        (i64.add
          (call_ref $ll
            (i64.sub
              (local.get 0)
              (i64.const 2))
            (global.get $fib))
          (call_ref $ll
            (i64.sub
              (local.get 0)
              (i64.const 1))
            (global.get $fib)))))
  )
  (func $even (;8;) (type $ll) (param i64) (result i64)
    (if (result i64) ;; label = @1
      (i64.eqz
        (local.get 0))
      (then
        (i64.const 44))
      (else
        (call_ref $ll
          (i64.sub
            (local.get 0)
            (i64.const 1))
          (global.get $odd))))
  )
  (func $odd (;9;) (type $ll) (param i64) (result i64)
    (if (result i64) ;; label = @1
      (i64.eqz
        (local.get 0))
      (then
        (i64.const 99))
      (else
        (call_ref $ll
          (i64.sub
            (local.get 0)
            (i64.const 1))
          (global.get $even))))
  )
)
